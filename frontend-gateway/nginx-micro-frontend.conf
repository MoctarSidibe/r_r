# Micro Frontend Gateway Configuration
# Routes requests to appropriate micro frontends

upstream admin_frontend {
    server frontend-auto-ecole:3000;
    server frontend-auto-ecole-2:3000 backup;
}

upstream student_frontend {
    server frontend-candidat:3000;
    server frontend-candidat-2:3000 backup;
}

upstream api_backend {
    server backend-auto-ecole:8000;
    server backend-auto-ecole-2:8000 backup;
}

# Main server block
server {
    listen 80;
    server_name dgtt.local *.dgtt.local;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=gateway_limit:10m rate=30r/s;
    limit_req zone=gateway_limit burst=100 nodelay;
    
    # Admin micro frontend
    location /admin {
        proxy_pass http://admin_frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Micro frontend specific headers
        proxy_set_header X-Micro-Frontend "admin";
        proxy_set_header X-User-Role "admin";
        
        # Timeout settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /admin-error.html;
    }
    
    # Student micro frontend
    location /student {
        proxy_pass http://student_frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Micro frontend specific headers
        proxy_set_header X-Micro-Frontend "student";
        proxy_set_header X-User-Role "student";
        
        # Timeout settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /student-error.html;
    }
    
    # API backend routing
    location /api {
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API specific headers
        proxy_set_header X-API-Version "v1";
        proxy_set_header X-Client-Type "web";
        
        # Timeout settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /api-error.html;
    }
    
    # Default route - redirect to appropriate micro frontend
    location / {
        # Check user role and redirect
        if ($http_x_user_role = "admin") {
            return 301 /admin;
        }
        if ($http_x_user_role = "student") {
            return 301 /student;
        }
        
        # Default to student frontend
        return 301 /student;
    }
    
    # Error pages
    location = /admin-error.html {
        internal;
        return 503 '{"error": "Admin service temporarily unavailable"}';
        add_header Content-Type application/json;
    }
    
    location = /student-error.html {
        internal;
        return 503 '{"error": "Student service temporarily unavailable"}';
        add_header Content-Type application/json;
    }
    
    location = /api-error.html {
        internal;
        return 503 '{"error": "API service temporarily unavailable"}';
        add_header Content-Type application/json;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status": "healthy", "timestamp": "$time_iso8601"}';
        add_header Content-Type application/json;
    }
}
